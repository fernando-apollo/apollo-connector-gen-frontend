import mapValues from 'lodash/mapValues';

// Define the mock `customColorsRaw` with CSS variables
export const customColorsRaw = {
  border: {
    primary: 'var(--color-border-primary)',
    hover: 'var(--color-border-hover)',
    success: 'var(--color-border-success)',
    error: 'var(--color-border-error)',
    warning: 'var(--color-border-warning)',
    neutral: 'var(--color-border-neutral)',
    info: 'var(--color-border-info)',
    beta: 'var(--color-border-beta)',
    highlight: 'var(--color-border-highlight)',
    focused: 'var(--color-border-focused)',
    disabled: 'var(--color-border-disabled)',
    selected: 'var(--color-border-selected)',
    splitbutton: 'var(--color-border-splitbutton)',
    deselected: 'var(--color-border-deselected)',
    white: 'var(--color-border-white)',
    black: 'var(--color-border-black)',
    tab: 'var(--color-border-tab)',
  },
  text: {
    primary: 'var(--color-text-primary)',
    secondary: 'var(--color-text-secondary)',
    placeholder: 'var(--color-text-placeholder)',
    heading: 'var(--color-text-heading)',
    link: 'var(--color-text-link)',
    success: 'var(--color-text-success)',
    error: 'var(--color-text-error)',
    warning: 'var(--color-text-warning)',
    neutral: 'var(--color-text-neutral)',
    info: 'var(--color-text-info)',
    beta: 'var(--color-text-beta)',
    disabled: 'var(--color-text-disabled)',
    inverted: 'var(--color-text-inverted)',
    white: 'var(--color-text-white)',
    black: 'var(--color-text-black)',
  },
  bg: {
    primary: 'var(--color-bg-primary)',
    secondary: 'var(--color-bg-secondary)',
    success: 'var(--color-bg-success)',
    'success-selected': 'var(--color-bg-success-selected)',
    error: 'var(--color-bg-error)',
    'error-selected': 'var(--color-bg-error-selected)',
    'error-hover': 'var(--color-bg-error-hover)',
    warning: 'var(--color-bg-warning)',
    'warning-selected': 'var(--color-bg-warning-selected)',
    'warning-hover': 'var(--color-bg-warning-hover)',
    neutral: 'var(--color-bg-neutral)',
    info: 'var(--color-bg-info)',
    'info-hover': 'var(--color-bg-info-hover)',
    beta: 'var(--color-bg-beta)',
    'beta-hover': 'var(--color-bg-beta-hover)',
    highlight: 'var(--color-bg-highlight)',
    searchhighlight: 'var(--color-bg-searchhighlight)',
    tableheader: 'var(--color-bg-tableheader)',
    'table-hover': 'var(--color-bg-table-hover)',
    input: 'var(--color-bg-input)',
    white: 'var(--color-bg-white)',
    selected: 'var(--color-bg-selected)',
    deselected: 'var(--color-bg-deselected)',
    disabled: 'var(--color-bg-disabled)',
    black: 'var(--color-bg-black)',
    overlay: 'var(--color-bg-overlay)',
    notice: 'var(--color-bg-notice)',
    'blue-tag-hover': 'var(--color-bg-blue-tag-hover)',
    'gray-tag-hover': 'var(--color-bg-gray-tag-hover)',
  },
  btn: {
    primary: 'var(--color-btn-primary)',
    'primary-hover': 'var(--color-btn-primary-hover)',
    'primary-selected': 'var(--color-btn-primary-selected)',
    destructive: 'var(--color-btn-destructive)',
    'destructive-hover': 'var(--color-btn-destructive-hover)',
    secondary: 'var(--color-btn-secondary)',
    'secondary-hover': 'var(--color-btn-secondary-hover)',
    'secondary-selected': 'var(--color-btn-secondary-selected)',
  },
  icon: {
    primary: 'var(--color-icon-primary)',
    secondary: 'var(--color-icon-secondary)',
    success: 'var(--color-icon-success)',
    error: 'var(--color-icon-error)',
    warning: 'var(--color-icon-warning)',
    change: 'var(--color-icon-change)',
    info: 'var(--color-icon-info)',
    beta: 'var(--color-icon-beta)',
    disabled: 'var(--color-icon-disabled)',
    inverted: 'var(--color-icon-inverted)',
    white: 'var(--color-icon-white)',
  },
  brand: {
    primary: 'var(--color-brand-primary)',
    secondary: 'var(--color-brand-secondary)',
    tertiary: 'var(--color-brand-tertiary)',
    accent: 'var(--color-brand-accent)',
  },
  code: {
    a: 'var(--color-code-a)',
    b: 'var(--color-code-b)',
    c: 'var(--color-code-c)',
    d: 'var(--color-code-d)',
    e: 'var(--color-code-e)',
    f: 'var(--color-code-f)',
    g: 'var(--color-code-g)',
  },
  flowchart: {
    text: 'var(--color-flowchart-text)',
    a: 'var(--color-flowchart-a)',
    b: 'var(--color-flowchart-b)',
    c: 'var(--color-flowchart-c)',
    d: 'var(--color-flowchart-d)',
  },
} satisfies Record<string, Record<string, `var(--color-${string}-${string})`>>;

// Use lodash's mapValues to transform the colors for `customColors`
export const customColors = mapValues(customColorsRaw, (v) =>
  mapValues(v, (rgb) => `rgb(${rgb})`),
) as typeof customColorsRaw;
